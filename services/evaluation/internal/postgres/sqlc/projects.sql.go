// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: projects.sql

package db

import (
	"context"
)

const checkAndUpdateProjectStatus = `-- name: CheckAndUpdateProjectStatus :one
UPDATE projects 
SET status = $2
WHERE id = $1 AND status = 'ready'
RETURNING id, name, created_at, status
`

type CheckAndUpdateProjectStatusParams struct {
	ID     int32         `json:"id"`
	Status ProjectStatus `json:"status"`
}

// Атомарно проверяет статус проекта и обновляет его, если он "ready"
// Возвращает ошибку, если статус не "ready"
func (q *Queries) CheckAndUpdateProjectStatus(ctx context.Context, arg CheckAndUpdateProjectStatusParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, checkAndUpdateProjectStatus, arg.ID, arg.Status)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const createProject = `-- name: CreateProject :one
INSERT INTO projects (name, status)
VALUES ($1, $2)
RETURNING id, name, created_at, status
`

type CreateProjectParams struct {
	Name   string        `json:"name"`
	Status ProjectStatus `json:"status"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject, arg.Name, arg.Status)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const getProject = `-- name: GetProject :one
SELECT id, name, created_at, status
FROM projects
WHERE id = $1
`

func (q *Queries) GetProject(ctx context.Context, id int32) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProject, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const listProjects = `-- name: ListProjects :many
SELECT id, name, created_at, status
FROM projects
ORDER BY created_at DESC
`

func (q *Queries) ListProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, listProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Project{}
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProjectStatus = `-- name: UpdateProjectStatus :one
UPDATE projects 
SET status = $2
WHERE id = $1
RETURNING id, name, created_at, status
`

type UpdateProjectStatusParams struct {
	ID     int32         `json:"id"`
	Status ProjectStatus `json:"status"`
}

func (q *Queries) UpdateProjectStatus(ctx context.Context, arg UpdateProjectStatusParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, updateProjectStatus, arg.ID, arg.Status)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}
