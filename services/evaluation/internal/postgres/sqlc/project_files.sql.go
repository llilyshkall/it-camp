// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: project_files.sql

package db

import (
	"context"
	"database/sql"
)

const createProjectFile = `-- name: CreateProjectFile :one
INSERT INTO project_files (project_id, filename, original_name, file_path, file_size, mime_type)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, project_id, filename, original_name, file_path, file_size, mime_type, uploaded_at
`

type CreateProjectFileParams struct {
	ProjectID    int32          `json:"project_id"`
	Filename     string         `json:"filename"`
	OriginalName string         `json:"original_name"`
	FilePath     string         `json:"file_path"`
	FileSize     int64          `json:"file_size"`
	MimeType     sql.NullString `json:"mime_type"`
}

func (q *Queries) CreateProjectFile(ctx context.Context, arg CreateProjectFileParams) (ProjectFile, error) {
	row := q.db.QueryRowContext(ctx, createProjectFile,
		arg.ProjectID,
		arg.Filename,
		arg.OriginalName,
		arg.FilePath,
		arg.FileSize,
		arg.MimeType,
	)
	var i ProjectFile
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Filename,
		&i.OriginalName,
		&i.FilePath,
		&i.FileSize,
		&i.MimeType,
		&i.UploadedAt,
	)
	return i, err
}

const deleteProjectFile = `-- name: DeleteProjectFile :exec
DELETE FROM project_files
WHERE id = $1
`

func (q *Queries) DeleteProjectFile(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProjectFile, id)
	return err
}

const getProjectFile = `-- name: GetProjectFile :one
SELECT id, project_id, filename, original_name, file_path, file_size, mime_type, uploaded_at
FROM project_files
WHERE id = $1
`

func (q *Queries) GetProjectFile(ctx context.Context, id int32) (ProjectFile, error) {
	row := q.db.QueryRowContext(ctx, getProjectFile, id)
	var i ProjectFile
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Filename,
		&i.OriginalName,
		&i.FilePath,
		&i.FileSize,
		&i.MimeType,
		&i.UploadedAt,
	)
	return i, err
}

const listProjectFiles = `-- name: ListProjectFiles :many
SELECT id, project_id, filename, original_name, file_path, file_size, mime_type, uploaded_at
FROM project_files
WHERE project_id = $1
ORDER BY uploaded_at DESC
`

func (q *Queries) ListProjectFiles(ctx context.Context, projectID int32) ([]ProjectFile, error) {
	rows, err := q.db.QueryContext(ctx, listProjectFiles, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProjectFile{}
	for rows.Next() {
		var i ProjectFile
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Filename,
			&i.OriginalName,
			&i.FilePath,
			&i.FileSize,
			&i.MimeType,
			&i.UploadedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
