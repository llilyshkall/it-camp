// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: remarks.sql

package db

import (
	"context"
)

const createRemark = `-- name: CreateRemark :one
INSERT INTO remarks (project_id, direction, section, subsection, content)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, project_id, direction, section, subsection, content, created_at
`

type CreateRemarkParams struct {
	ProjectID  int32  `json:"project_id"`
	Direction  string `json:"direction"`
	Section    string `json:"section"`
	Subsection string `json:"subsection"`
	Content    string `json:"content"`
}

func (q *Queries) CreateRemark(ctx context.Context, arg CreateRemarkParams) (Remark, error) {
	row := q.db.QueryRowContext(ctx, createRemark,
		arg.ProjectID,
		arg.Direction,
		arg.Section,
		arg.Subsection,
		arg.Content,
	)
	var i Remark
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Direction,
		&i.Section,
		&i.Subsection,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRemark = `-- name: DeleteRemark :exec
DELETE FROM remarks
WHERE id = $1
`

func (q *Queries) DeleteRemark(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteRemark, id)
	return err
}

const getRemark = `-- name: GetRemark :one
SELECT id, project_id, direction, section, subsection, content, created_at
FROM remarks
WHERE id = $1
`

func (q *Queries) GetRemark(ctx context.Context, id int32) (Remark, error) {
	row := q.db.QueryRowContext(ctx, getRemark, id)
	var i Remark
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Direction,
		&i.Section,
		&i.Subsection,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const listRemarksByProject = `-- name: ListRemarksByProject :many
SELECT id, project_id, direction, section, subsection, content, created_at
FROM remarks
WHERE project_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListRemarksByProject(ctx context.Context, projectID int32) ([]Remark, error) {
	rows, err := q.db.QueryContext(ctx, listRemarksByProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Remark{}
	for rows.Next() {
		var i Remark
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Direction,
			&i.Section,
			&i.Subsection,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRemark = `-- name: UpdateRemark :one
UPDATE remarks
SET direction = $2, section = $3, subsection = $4, content = $5
WHERE id = $1
RETURNING id, project_id, direction, section, subsection, content, created_at
`

type UpdateRemarkParams struct {
	ID         int32  `json:"id"`
	Direction  string `json:"direction"`
	Section    string `json:"section"`
	Subsection string `json:"subsection"`
	Content    string `json:"content"`
}

func (q *Queries) UpdateRemark(ctx context.Context, arg UpdateRemarkParams) (Remark, error) {
	row := q.db.QueryRowContext(ctx, updateRemark,
		arg.ID,
		arg.Direction,
		arg.Section,
		arg.Subsection,
		arg.Content,
	)
	var i Remark
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Direction,
		&i.Section,
		&i.Subsection,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}
