name: Deploy to Server (Docker)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –≤—Ä—É—á–Ω—É—é

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/remarks

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.5'
          cache: true

      - name: Run tests
        working-directory: ./services/remarks
        run: |
          go test -v ./...
          go vet ./...
          go fmt ./...

      - name: Build binary
        working-directory: ./services/remarks
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o remarks ./cmd/remarks

  build-and-push:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/remarks
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Server
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    environment: production
    permissions:
      contents: read
      issues: write
    steps:
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –¥–æ–º–∞—à–Ω–µ–π –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            mkdir -p ~/remarks
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–µ docker
            if ! groups | grep -q docker; then
              echo "User not in docker group. Adding to docker group..."
              sudo usermod -aG docker $USER
              echo "Please log out and log back in, or run: newgrp docker"
            fi
            
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ GitHub Container Registry
            echo "Authenticating with GitHub Container Registry..."
            if ! echo ${{ secrets.PACKAGES_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin; then
              echo "‚ùå Failed to authenticate with GitHub Container Registry"
              exit 1
            fi
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            echo "Stopping old container..."
            docker stop remarks || true
            docker rm remarks || true
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑ (–∏—Å–ø–æ–ª—å–∑—É–µ–º master —Ç–µ–≥)
            echo "Pulling new image..."
            if ! docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:master; then
              echo "‚ùå Failed to pull Docker image"
              exit 1
            fi
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–∏—Å–ø–æ–ª—å–∑—É–µ–º master —Ç–µ–≥)
            echo "Starting new container..."
            if ! docker run -d \
              --name remarks \
              --restart unless-stopped \
              -p 8081:8080 \
              -e ENVIRONMENT=production \
              -e PORT=8080 \
              -e TZ=UTC \
              --health-cmd="curl -f http://localhost:8080/health || exit 1" \
              --health-interval=30s \
              --health-timeout=10s \
              --health-retries=3 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:master; then
              echo "‚ùå Failed to start Docker container"
              exit 1
            fi
            
            # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            echo "Waiting for container to be ready..."
            sleep 10
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            echo "Container status:"
            if ! docker ps | grep remarks; then
              echo "‚ùå Container is not running"
              exit 1
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º health
            echo "Health check:"
            if ! curl -f http://localhost:8081/health; then
              echo "‚ùå Health check failed"
              exit 1
            fi
            
            echo "‚úÖ Deployment completed successfully!"

      - name: Health Check
        run: |
          echo "Waiting for service to be ready..."
          sleep 30
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
          if curl -f "http://${{ secrets.SERVER_HOST }}/health"; then
            echo "‚úÖ Service is healthy and accessible!"
          else
            echo "‚ùå Service health check failed"
            exit 1
          fi

      - name: Create Deployment Issue
        if: success()
        run: |
          # –°–æ–∑–¥–∞–µ–º issue —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–µ–ø–ª–æ–µ
          gh issue create \
            --title "üöÄ Deployment: ${{ github.event.head_commit.message }}" \
            --body "## üìã Deployment Information
          
          **Branch:** \`${{ github.ref_name }}\`
          **Commit:** \`${{ github.sha }}\`
          **Author:** ${{ github.event.head_commit.author.name }}
          **Date:** ${{ github.event.head_commit.timestamp }}
          **Message:** ${{ github.event.head_commit.message }}
          
          ## üîß Service Details
          - **Service:** remarks
          - **Image:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:master
          - **Port:** 8081:8080
          - **Environment:** production
          
          ## ‚úÖ Status
          - [x] Build completed
          - [x] Image pushed to registry
          - [x] Deployed to server
          - [x] Health check passed
          
          ## üìù Commit Details
          \`\`\`
          ${{ github.event.head_commit.message }}
          \`\`\`
          
          ---
          *This issue was automatically created by GitHub Actions*" \
            --label "deployment" \
            --label "automated"
